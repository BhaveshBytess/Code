```c

#include <stdio.h>

void logicGates() {
    int a, b;

    printf("Enter a number (0 or 1) for NOT Gate: ");
    scanf("%d", &a);
    printf("NOT %d = %d\n", a, !a);

    
    printf("\nEnter two numbers (0 or 1) for AND Gate: ");
    scanf("%d %d", &a, &b);
    printf("%d AND %d = %d\n", a, b, a && b);

    
    printf("\nEnter two numbers (0 or 1) for OR Gate: ");
    scanf("%d %d", &a, &b);
    printf("%d OR %d = %d\n", a, b, a || b);

   
    printf("\nEnter two numbers (0 or 1) for NAND Gate: ");
    scanf("%d %d", &a, &b);
    printf("%d NAND %d = %d\n", a, b, !(a && b));

    
    printf("\nEnter two numbers (0 or 1) for NOR Gate: ");
    scanf("%d %d", &a, &b);
    printf("%d NOR %d = %d\n", a, b, !(a || b));
}

int main() {
    logicGates();
    return 0;
}

```


```c++

#include <iostream>
#include <bitset>
#include <iomanip>
#include <string>

using namespace std;

// Function to convert a decimal number into binary
string decimalToBinary(int n) {
    return bitset<32>(n).to_string();  // Convert to 32-bit binary
}

// Function to add two binary strings (16-bit addition)
string addBinary(string bin1, string bin2) {
    int num1 = stoi(bin1, 0, 2);  // Convert binary string to integer
    int num2 = stoi(bin2, 0, 2);  // Convert binary string to integer
    int sum = num1 + num2;  // Add the two numbers
    return bitset<16>(sum).to_string();  // Return the sum as a 16-bit binary string
}

// Function to convert decimal to hexadecimal
string decimalToHexadecimal(int n) {
    stringstream ss;
    ss << hex << n;
    return ss.str();  // Return the hexadecimal value as a string
}

// Function to convert a decimal number to binary and show output
void convertDecimalToBinary() {
    int decimal;
    cout << "Enter a decimal number: ";
    cin >> decimal;
    cout << "Binary representation: " << decimalToBinary(decimal) << endl;
}

// Function to perform binary addition
void addBinaryNumbers() {
    string bin1, bin2;
    cout << "Enter the first 16-bit binary number: ";
    cin >> bin1;
    cout << "Enter the second 16-bit binary number: ";
    cin >> bin2;
    string result = addBinary(bin1, bin2);
    cout << "Sum of the two binary numbers: " << result << endl;
}

// Function to add two decimal numbers (-124 and 236) and show output in binary
void addDecimalNumbers() {
    int num1 = -124, num2 = 236;
    int sum = num1 + num2;
    cout << "Sum of " << num1 << " and " << num2 << " in binary is: " 
         << decimalToBinary(sum) << endl;
}

// Function to convert a decimal number to hexadecimal
void convertDecimalToHexadecimal() {
    int decimal = 862;
    cout << "Decimal number " << decimal << " in hexadecimal is: " 
         << decimalToHexadecimal(decimal) << endl;
}

int main() {
    int choice;
    
    cout << "Choose an option: \n";
    cout << "1. Convert a decimal number to binary\n";
    cout << "2. Add two 16-bit binary numbers\n";
    cout << "3. Add (-124)₁₀ and (236)₁₀ and show the output in binary format\n";
    cout << "4. Convert (862)₁₀ to hexadecimal\n";
    cout << "Enter your choice (1-4): ";
    cin >> choice;

    switch(choice) {
        case 1:
            convertDecimalToBinary();
            break;
        case 2:
            addBinaryNumbers();
            break;
        case 3:
            addDecimalNumbers();
            break;
        case 4:
            convertDecimalToHexadecimal();
            break;
        default:
            cout << "Invalid choice!" << endl;
    }
    
    return 0;
}

```



```c
#include <stdio.h>

void intToBinary(int n, char *binary) {
    for (int i = 0; i < 32; i++) {
        binary[i] = (n & (1 << (31 - i))) ? '1' : '0';
    }
    binary[32] = '\0'; // Null-terminate the string
}

int main() {
    // Given numbers
    int num1 = -124;  // Decimal -124
    int num2 = 236;   // Decimal 236
    
    // Step 1: Convert num1 (-124) and num2 (236) to 32-bit 2's complement binary format
    char binary_num1[33], binary_num2[33];
    intToBinary(num1, binary_num1);
    intToBinary(num2, binary_num2);
    
    // Step 2: Add the numbers
    int sum = num1 + num2;
    
    // Step 3: Convert the sum to binary format
    char binary_sum[33];
    intToBinary(sum, binary_sum);

    // Output the results
    printf("num1 = %d (binary: %s)\n", num1, binary_num1);
    printf("num2 = %d (binary: %s)\n", num2, binary_num2);
    printf("Sum = %d (binary: %s)\n", sum, binary_sum);
    
    return 0;
}

```



### Greatest

``` arm-asm

	AREA    GREATEST, CODE, READONLY
        ENTRY

        LDR     R0, =numbers       
        LDR     R1, [R0]           
        LDR     R2, =len           
        MOV     R3, #1        

check_loop
        CMP     R3, R2             
        BEQ     done               

        LDR     R4, [R0, R3, LSL #2] 
        CMP     R1, R4           
        MOVLT   R1, R4
        
        ADD     R3, R3, #1         
        B       check_loop         

done
       
        LDR     R5, =max_result    
        STR     R1, [R5]           

        
        B       done

        
        AREA    GREATEST, DATA, READWRITE
numbers  DCD     25, 10, 47, 36, 89, 58   
len      DCD     6                        
max_result DCD   0                        

        END
```


### Smallest

``` armasm

	AREA s,CODE,READONLY
	ENTRY
	START
	MOV R5,#6
	LDR R1,=ARRAY
	LDR R2,[R1],#4
loop 
	LDR R4,[R1],#4
	CMP R2,R4
	MOV R2,R4
	BLO loop1
loop1
	SUBS R5,R5,#1
	CMP R5,#0
	BNE loop
	LDR R4,=VALUE
	STR R2,[R4]
	
	NOP
	NOP
	NOP
ARRAY
	DCD 0x11111111
	DCD 0x22222222
	DCD 0x33333333
	DCD 0x44444444
	DCD 0x55555555
	DCD 0x66666666
	DCD 0x77777777


	AREA DATA1,DATA, READWRITE
VALUE DCD 0x0
	END
```



### Descending

```arm-asm

	AREA Sort, CODE, READONLY
        ENTRY

        MOV R0, #10
        MOV R1, #20
        MOV R2, #15

        CMP R0, R1
        BGE skip1
        MOV R3, R0
        MOV R0, R1
        MOV R1, R3

skip1
        CMP R0, R2
        BGE skip2
        MOV R3, R0
        MOV R0, R2
        MOV R2, R3

skip2
        CMP R1, R2
        BGE done
        MOV R3, R1
        MOV R1, R2
        MOV R2, R3

done
        END

```



### Ascending

```arm-asm

	AREA Sort, CODE, READONLY
        ENTRY

        MOV R0, #10     ; R0 = 10
        MOV R1, #20     ; R1 = 20
        MOV R2, #15     ; R2 = 15

        ; Compare R0 and R1
        CMP R0, R1
        BLE skip1        ; If R0 <= R1, skip swapping
        MOV R3, R0
        MOV R0, R1       ; Swap R0 and R1
        MOV R1, R3

skip1
        ; Compare R1 and R2
        CMP R1, R2
        BLE skip2        ; If R1 <= R2, skip swapping
        MOV R3, R1
        MOV R1, R2       ; Swap R1 and R2
        MOV R2, R3

skip2
        ; Compare R0 and R1 again
        CMP R0, R1
        BLE done         ; If R0 <= R1, sorting is complete
        MOV R3, R0
        MOV R0, R1       ; Swap R0 and R1
        MOV R1, R3

done
        END

```















#include <iostream>
#include <string>
#include <map>

using namespace std;

void hexToBinary(const string& hex) {
    // Mapping hexadecimal digits to binary equivalents
    map<char, string> hexToBin = {
        {'0', "0000"}, {'1', "0001"}, {'2', "0010"}, {'3', "0011"},
        {'4', "0100"}, {'5', "0101"}, {'6', "0110"}, {'7', "0111"},
        {'8', "1000"}, {'9', "1001"}, {'A', "1010"}, {'B', "1011"},
        {'C', "1100"}, {'D', "1101"}, {'E', "1110"}, {'F', "1111"},
        {'a', "1010"}, {'b', "1011"}, {'c', "1100"}, {'d', "1101"},
        {'e', "1110"}, {'f', "1111"}
    };

    cout << "Binary: ";
    for (char ch : hex) {
        cout << hexToBin[ch]; // Lookup and print binary equivalent
    }
    cout << endl;
}

int main() {
    string hex;
    cout << "Enter a hexadecimal number: ";
    cin >> hex;

    hexToBinary(hex);

    return 0;
}






        AREA Hex_Addition, CODE, READONLY
        ENTRY           
START   

        LDR R0, =0x1A   
        LDR R1, =0x2B   
        ADD R2, R0, R1 


STOP    
        B STOP          ; Branch to STOP (end program)

        END             ; End of program








        AREA Multiplication, CODE, READONLY
        ENTRY           

START   
        LDR R0, =1234   
        LDR R1, =5678   
        MUL R2, R0, R1  

STOP    
        B STOP          ; Branch to STOP (end program)

        END             ; End of program






        AREA Addition, CODE, READONLY
        ENTRY

START   
        LDR R0, =0x1234567812345678  ; Load lower 32 bits of the first number
        LDR R1, =0x9ABCDEF09ABCDEF0  ; Load lower 32 bits of the second number
        LDR R2, =0x0000000012345678  ; Load upper 32 bits of the first number
        LDR R3, =0x000000009ABCDEF0  ; Load upper 32 bits of the second number

        ADDS R4, R0, R1              ; Add lower 32 bits with carry
        ADC R5, R2, R3               ; Add upper 32 bits with carry

STOP    
        B STOP

        END








        AREA Swap, CODE, READONLY
        ENTRY

START   
        LDR R0, =0x1234      ; Load the first 16-bit number into R0
        LDR R1, =0x5678      ; Load the second 16-bit number into R1

        EOR R0, R0, R1       ; Step 1: R0 = R0 XOR R1
        EOR R1, R0, R1       ; Step 2: R1 = R0 XOR R1 (original R0 is now in R1)
        EOR R0, R0, R1       ; Step 3: R0 = R0 XOR R1 (original R1 is now in R0)

STOP    
        B STOP

        END

